
# Югозападен университет "Неофит Рилски"
# Курсово задание
## Описание на конзолни команди
Факултетен номер: 21251421037,ИСТ3

Конзолните програми и команди са сред основните инструменти в операционните системи, които ни позволяват да взаимодействаме с компютърната среда посредством текстов интерфейс.
Три от най-популярните конзолни програми са PowerShell, CMD и Bash.

## PowerShell
PowerShell е разработен от Microsoft и е мощен конзолен скриптов език и команден интерпретатор. Той предлага разширени възможности за автоматизация и управление на Windows операционната система. PowerShell използва обекти и команди, наречени "cmdlets", които се използват за извършване на различни задачи. В PowerShell можем да изпълняваме команди за управление на файловата система, мрежовите настройки, регистъра и много други.

Някои от най-често използваните команди в PowerShell са:
- Get-ChildItem – извежда списък с файловете и директориите в текущата директория;
- Set-Location – променя текущата директория;
- New-Item – създава нов файл или директория;
- Remove-Item – изтрива файл или директория;
- Copy-Item – копира файл или директория от едно място на друго;
- Move-Item – премества файл или директория от едно място на друго;
- Get-Process – извежда информация за текущите процеси;
- Stop-Process – спира определен процес;
- Get-Service – извежда информация за системните услуги;
- Restart-Service – рестартира определен системен сервиз.

## CMD (Command Prompt)
CMD (Command Prompt) е стандартният конзолен интерфейс на Windows. Въпреки че CMD не предлага толкова широк набор от функции като PowerShell, той все пак е полезен за изпълнение на базови операции и команди в операционната система. С CMD можем да стартираме програми, да управляваме файловата система, да конфигурираме мрежови настройки и други подобни дейности. CMD използва команди и синтаксис, които са по-подобни на тези в старите MS-DOS системи.

## Bash
Bash е стандартният команден интерпретатор и скриптов език за Unix и Linux базирани операционни системи. Той предлага мощни инструменти за автоматизация и управление на системата. Bash командите могат да бъдат използвани за навигация във файловата система, манипулиране на файлове и директории, управление на процесите и конфигуриране на системните настройки.

Някои от най-често използваните команди в Bash са:
- ls – извежда списък с файловете и директориите в текущата директория
- cd – променя текущата директория
- mkdir – създава нова директория
- rm – изтрива файл или директория
- cp – копира файл или директория от едно място на друго
- mv – премества файл или директория от едно място на друго
- ps – извежда списък с текущите процеси
- kill – спира определен процес
- grep – търси за даден израз във файл или изход от команда
- ssh – се свързва към друго устройство чрез SSH (Secure Shell) протокол.

Това са само някои от многото команди, които можете да използвате в PowerShell, CMD и Bash. Всяка от тези конзолни програми предлага богато разнообразие от команди и възможности, които могат да бъдат използвани за изпълнение на различни задачи и автоматизация на операциите във вашия компютър.

Благодарение на гъвкавостта си, Bash се използва широко в Linux системите и се счита за едно от най-мощните средства за автоматизация на задачи в командния ред.

## Приложения, използващи Command Line Interface
Съществуват компютърни приложения, които също използват Command Line Interface.

Компютърните приложения може да не поддържат, да поддържат някои или да поддържат и трите главни механизма на взаимодействие чрез команди:

1.Параметри: Повечето операционни системи поддържат начин за подаване на допълнителни параметри към програма, когато тя бъде стартирана. Когато дадена програма бъде стартирана от командния интерпретатор на операционната система, допълнителен текст заедно с името на програмата биват подавани към стартираната програма.
2.Интерактивни сесии: След стартирането си дадена програма може да създаде оператор с независими ресурси, за да въвежда команди под формата на текст.
3.Вътрешно-системно взаимодействие: Повечето операционни системи поддържат начини за вътрешно-системни взаимодействия. Командите от потребителски процеси могат да бъдат пренасочени към командния интерфейс, чрез един от тези методи.

## CLI програми
Някои приложения поддържат само този тип интерфейс, като на потребителя се предоставя възможност за подаване на команди и поведението на програмата се определя от тях. Примери за такива програми са:

- DEBUG
- Diskpart
- Ed
- Edlin
- Fdisk
- Ping

## Хибридни програми
Някои компютърни програми поддържат както интерфейс с въвеждане на команди (CLI), така и графичен интерфейс (GUI). В някои случаи програмата с графичен интерфейс е просто „обвивка“ около отделен изпълним файл на програма с въвеждане на команди. В други случаи някои програми предлагат алтернатива с въвеждане на команди, на програмата с графичен интерфейс. Не винаги обаче двата варианта предлагат сходна функционалност. Например MATLAB, компютърна програма за числени анализи, не предлага графична среда за някои изчисления, но интерфейсът с въвеждане на команди може да се справи с всяко изчисление, което MATLAB поддържа.

Ранните игри на компанията Sierra, като първите 3 версии на играта King’s Quest (1984 – 1986), използват команди от вграден в играта конзолен прозорец, чрез които героят се движи.

## История
Интерфейсът с въвеждане на команди, води началото си от комуникирането на хората помежду си, посредством телеграфни апарати. Така те разменяли информация помежду си, като обикновено информацията била с дължина един ред. Ранните компютърни системи, често използвали телеграфи, като средство за взаимодействие с човек оператор. Компютърът се превърнал в заместител и така вместо хората да обменят информация помежду си чрез телеграфни машини, човекът взаимодейства с компютърът.

След време телеграфът бил заменен от устройство с клавиатура и екран с функциите на телеграф, наричано TTY, а после и от терминал, където компютърният софтуер може да използва целия екран, а не само да печата последователни редове.

През ноември 2006, Microsoft, издават версия 1.0 на програмата Windows Powershell (наричана в проект Monad), която комбинира в себе си програми за работа с команди на Unix с техния обектно-ориентиран .NET Framework. MinGW и Cygwin са безплатни програмни пакети, които предлагат CLI, подобен на този използван в UNIX. Microsoft предлага имплементацията на ksh на компанията MKS Inc. – MKS Korn Shell за Windows чрез добавката си Services for UNIX.

## Използване
Интерфейсът с въвеждане на команди се използва, когато широк набор от команди или заявки и голям брой настройки към тях могат да бъдат въведени по-бързо като текстови команди, отколкото чрез система с потребителски интерфейс. Типичен пример за това са командните прозорци на операционните системи. Този тип въвеждане на данни се използва и при системи, които нямат достатъчно ресурс за ползване на графичен интерфейс.

Интерфейсът с въвеждане на команди най-вече се използва от програмисти или системни администратори, в научни среди или от по-технически напреднали потребители. Той също е разпространен сред потребители с проблеми в зрението, понеже командите и отговорите към тях, могат да бъдат възпроизвеждани чрез т.нар. Брайлови терминали.

## Структура на командния интерпретатор
```
prompt command param1 param2 param3 ... paramN
```
- Prompt – генерира се от програмата и извиква съдържание за потребителя.
- Command (команда) – извиква се от потребителя. Командите са обикновено една от трите вида:
- Вътрешна – разпозната и обработвана от самия интерпретатор на командния ред и независеща от никакъв външен изпълняващ файл (.exe).
- Добавена – отделен изпълняващ файл, основно считан за част от операционната среда и винаги добавен вътре заедно с ОС.
- Външна – външни изпълними файлове, които не са част от основната ОС, но са добавени от други източници за специфични цели и приложения.
- param1 ...paramN – Допълнителни параметри добавени от потребителя. Формата и значението на параметрите зависят от извиканата команда. В случай на добавена или външна команда, стойностите на параметрите се предават от процеса (определен от командата), когато процесът е стартиран от ОС. Параметрите могат да бъдат аргументи или опции.
В този пример сепараторите между елементите на командния интерфейс са празни полета (whitespace characters), а в края на реда сепаратора е нов ред. Това е широко употребявана (но не универсална) практика за командните интерфейси.

Интерефейс с команден ред се състои основно от синтаксис и семантика. Синтаксисът е „букварът“ или още граматиката, която всички команди трябва да следват. В случаите с операционната система MS-DOS или Unix всяка от тях дефинира техен собствен списък от правила, които всички команди следват. Когато има вградена системи (embedded systems), всяка компания продавач като Nortel, Juniper Networks или Cisco Systems, дефинира свой собствен списък с правила, към които командите вътре в командния интерпретатор се приспособяват. Тези правила също определят как потребителят ще навигира през системата от команди. Семантиката определя какъв вид операции са възможни, на какъв вид данни тези операции могат да бъдат изпълнени и как граматиката представя тези данни и операции – символичното значение в синтаксиса.

Два различни командни интерфейса могат да съответстват по синтаксис или по семантика, но само когато те съответстват и по двете те могат да бъдат считани за достатъчно близки, за да позволят на потребителя да използва и двата командни интерпретатора без да е необходимо самообучение, както и възможността за преупотреба на кода.

Един обикновен команден интерпретатор ще изпише „prompt“, ще приеме „команден ред“ въведен от потребителя и подаден за изпълнение с клавиша „Enter“, ще изпълни указаната команда и ще осигури текстова визуализация на резултати или съобщения за грешки. Един по-съвременен команден интерфейс би валидирал (оценка на данните), интерпретирал и разширил параметрите на командния интерфейс преди да изпълни подадената команда, и допълнително би могъл да прихване или пренасочи своя изход (резултат от изчисления).

За разлика от бутон или прозорец за меню в GUI (графичен потребителски интерфейс), командният интерпретатор е самодокументиращ се, показващ само това, което потребителят иска да бъде направено. В допълнение командният интерпретатор включва стандартни настройки, които могат да бъдат достъпени за промяна на резултатите. В случай че настройките са от помощ при компилирането на кода, така промененият команден интерпретатор може да бъде запазен чрез низ от символи (character string) или псевдоним, който представя цялата команда, или няколко команди могат да бъдат групирани, за да изпълняват по-сложна последователност – например компилиране на програмата, нейното инсталиране и пускане – създавайки единична цялост, наречена командна процедура или код, който сам по себе си може да бъде третиран като команда. Тези предимства означават, че потребителят трябва да изчисли комплексна команда или серии такива само веднъж, защото те могат да бъдат запазени, за да бъдат използвани отново.

Командите задавани на командния интерпретатор са често в една от следните форми:
>правиНещо как къмФайл(ове)
>правиНещо как файлИзточник целевиФайл
>правиНещо как <входенФайл> изходенФайл
>правиНещо как | правиНещо как | правиНещо как > изходенФайл




## Tech

Dillinger uses a number of open source projects to work properly:

- [AngularJS] - HTML enhanced for web apps!
- [Ace Editor] - awesome web-based text editor
- [markdown-it] - Markdown parser done right. Fast and easy to extend.
- [Twitter Bootstrap] - great UI boilerplate for modern web apps
- [node.js] - evented I/O for the backend
- [Express] - fast node.js network app framework [@tjholowaychuk]
- [Gulp] - the streaming build system
- [Breakdance](https://breakdance.github.io/breakdance/) - HTML
to Markdown converter
- [jQuery] - duh

And of course Dillinger itself is open source with a [public repository][dill]
 on GitHub.

## Installation

Dillinger requires [Node.js](https://nodejs.org/) v10+ to run.

Install the dependencies and devDependencies and start the server.

```sh
cd dillinger
npm i
node app
```

For production environments...

```sh
npm install --production
NODE_ENV=production node app
```

## Plugins

Dillinger is currently extended with the following plugins.
Instructions on how to use them in your own application are linked below.

| Plugin | README |
| ------ | ------ |
| Dropbox | [plugins/dropbox/README.md][PlDb] |
| GitHub | [plugins/github/README.md][PlGh] |
| Google Drive | [plugins/googledrive/README.md][PlGd] |
| OneDrive | [plugins/onedrive/README.md][PlOd] |
| Medium | [plugins/medium/README.md][PlMe] |
| Google Analytics | [plugins/googleanalytics/README.md][PlGa] |

## Development

Want to contribute? Great!

Dillinger uses Gulp + Webpack for fast developing.
Make a change in your file and instantaneously see your updates!

Open your favorite Terminal and run these commands.

First Tab:

```sh
node app
```

Second Tab:

```sh
gulp watch
```

(optional) Third:

```sh
karma test
```

#### Building for source

For production release:

```sh
gulp build --prod
```

Generating pre-built zip archives for distribution:

```sh
gulp build dist --prod
```

## Docker

Dillinger is very easy to install and deploy in a Docker container.

By default, the Docker will expose port 8080, so change this within the
Dockerfile if necessary. When ready, simply use the Dockerfile to
build the image.

```sh
cd dillinger
docker build -t <youruser>/dillinger:${package.json.version} .
```

This will create the dillinger image and pull in the necessary dependencies.
Be sure to swap out `${package.json.version}` with the actual
version of Dillinger.

Once done, run the Docker image and map the port to whatever you wish on
your host. In this example, we simply map port 8000 of the host to
port 8080 of the Docker (or whatever port was exposed in the Dockerfile):

```sh
docker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger <youruser>/dillinger:${package.json.version}
```

> Note: `--capt-add=SYS-ADMIN` is required for PDF rendering.

Verify the deployment by navigating to your server address in
your preferred browser.

```sh
127.0.0.1:8000
```

## License

MIT

**Free Software, Hell Yeah!**

[//]: # (These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax)

   [dill]: <https://github.com/joemccann/dillinger>
   [git-repo-url]: <https://github.com/joemccann/dillinger.git>
   [john gruber]: <http://daringfireball.net>
   [df1]: <http://daringfireball.net/projects/markdown/>
   [markdown-it]: <https://github.com/markdown-it/markdown-it>
   [Ace Editor]: <http://ace.ajax.org>
   [node.js]: <http://nodejs.org>
   [Twitter Bootstrap]: <http://twitter.github.com/bootstrap/>
   [jQuery]: <http://jquery.com>
   [@tjholowaychuk]: <http://twitter.com/tjholowaychuk>
   [express]: <http://expressjs.com>
   [AngularJS]: <http://angularjs.org>
   [Gulp]: <http://gulpjs.com>

   [PlDb]: <https://github.com/joemccann/dillinger/tree/master/plugins/dropbox/README.md>
   [PlGh]: <https://github.com/joemccann/dillinger/tree/master/plugins/github/README.md>
   [PlGd]: <https://github.com/joemccann/dillinger/tree/master/plugins/googledrive/README.md>
   [PlOd]: <https://github.com/joemccann/dillinger/tree/master/plugins/onedrive/README.md>
   [PlMe]: <https://github.com/joemccann/dillinger/tree/master/plugins/medium/README.md>
   [PlGa]: <https://github.com/RahulHP/dillinger/blob/master/plugins/googleanalytics/README.md>
